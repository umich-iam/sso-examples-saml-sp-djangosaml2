"""
Django settings for sp_djangosaml2_sample project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import os
import saml2
import saml2.saml
from pathlib import Path
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost', cast=Csv())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djangosaml2',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'djangosaml2.middleware.SamlSessionMiddleware',
]

ROOT_URLCONF = 'sp_djangosaml2_sample.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'sp_djangosaml2_sample.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'


# djangosaml2

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'djangosaml2.backends.Saml2Backend',
)

LOGIN_URL = '/saml2/login/'
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

SAMLDIR = BASE_DIR.joinpath('saml')
SAML_SP_BASE_URL = config('SAML_SP_BASE_URL')
SAML_IDP_BASE_URL = config('SAML_IDP_BASE_URL')
SAML_CONFIG = {
  # full path to the xmlsec1 binary programm
  'xmlsec_binary': '/usr/bin/xmlsec1',

  # your entity id, usually your subdomain plus the url to the metadata view
  'entityid': f'{SAML_SP_BASE_URL}/saml2/metadata/',

  # directory with attribute mapping
  'attribute_map_dir': str(SAMLDIR.joinpath('attribute-maps')),

  # this block states what services we provide
  'service': {
      # we are just a lonely SP
      'sp' : {
          'name': 'Federated Django sample SP',
          'name_id_format': saml2.saml.NAMEID_FORMAT_PERSISTENT,

          # For Okta add signed logout requets. Enable this:
          # "logout_requests_signed": True,

          'endpoints': {
              # url and binding to the assetion consumer service view
              # do not change the binding or service name
              'assertion_consumer_service': [
                  (f'{SAML_SP_BASE_URL}/saml2/acs/', saml2.BINDING_HTTP_POST),
              ],
              # url and binding to the single logout service view
              # do not change the binding or service name
              'single_logout_service': [
                  # Disable next two lines for HTTP_REDIRECT for IDP's that only support HTTP_POST. Ex. Okta:
                  (f'{SAML_SP_BASE_URL}/saml2/ls/', saml2.BINDING_HTTP_REDIRECT),
                  (f'{SAML_SP_BASE_URL}/saml2/ls/post', saml2.BINDING_HTTP_POST),
              ],
          },

          # Mandates that the identity provider MUST authenticate the
          # presenter directly rather than rely on a previous security context.
          'force_authn': False,

           # Enable AllowCreate in NameIDPolicy.
          'name_id_format_allow_create': False,

           # attributes that this project need to identify a user
          'required_attributes': ['mail'],

           # attributes that may be useful to have but not required
          'optional_attributes': ['eduPersonAffiliation'],

          # in this section the list of IdPs we talk to are defined
          # This is not mandatory! All the IdP available in the metadata will be considered.
          'idp': {
              # we do not need a WAYF service since there is
              # only an IdP defined here. This IdP should be
              # present in our metadata

              # the keys of this dictionary are entity ids
              f'{SAML_IDP_BASE_URL}/idp/shibboleth/': {
                  'single_sign_on_service': {
                      saml2.BINDING_HTTP_REDIRECT: f'{SAML_IDP_BASE_URL}/idp/profile/SAML2/Redirect/SSO',
                  },
                  'single_logout_service': {
                      saml2.BINDING_HTTP_REDIRECT: f'{SAML_IDP_BASE_URL}/idp/profile/SAML2/Redirect/SLO',
                  },
              },
          },
      },
  },

  # where the remote metadata is stored, local, remote or mdq server.
  # One metadatastore or many ...
  'metadata': {
      'remote': [{"url": f"{SAML_IDP_BASE_URL}/idp/shibboleth",
                  "disable_ssl_certificate_validation": True},],
      'local': [SAMLDIR.joinpath('remote_metadata.xml')],
      #'mdq': [{"url": "https://ds.testunical.it",
      #         "cert": "certficates/others/ds.testunical.it.cert",
      #         "disable_ssl_certificate_validation": True}]
      },

  # set to 1 to output debugging information
  'debug': 1,

  # Signing
  'key_file': SAMLDIR.joinpath('private.key'),  # private part
  'cert_file': SAMLDIR.joinpath('public.pem'),  # public part

  # Encryption
  'encryption_keypairs': [{
      'key_file': SAMLDIR.joinpath('private.key'),  # private part
      'cert_file': SAMLDIR.joinpath('public.pem'),  # public part
  }],

  # own metadata settings
  'contact_person': [
      {'given_name': 'Patrick',
       'sur_name': 'Steffes',
       'company': 'University of Michigan',
       'email_address': 'psteffes@umich.edu',
       'contact_type': 'technical'},
      {'given_name': 'UMich',
       'sur_name': 'Shibboleth',
       'company': 'University of Michigan',
       'email_address': 'shibboleth@umich.edu',
       'contact_type': 'administrative'},
  ],

  # you can set multilanguage information here
  'organization': {
      'name': [('University of Michigan', 'en')],
      'display_name': [('U-M', 'en')],
      'url': [('https://umich.edu', 'en')],
  },
}
